<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\IORemap.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\IORemap.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Jun  2 10:17:43 2023
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CLKCTRL_init &rArr; DumpClock &rArr; log_init &rArr; bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[40]">CAN_RX0_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[41]">CAN_RX1_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[42]">CAN_SCE_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3f]">CAN_TX_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[20]">COMP_1_2_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[15]">DMA_Channel1_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[16]">DMA_Channel2_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[17]">DMA_Channel3_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[18]">DMA_Channel4_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[19]">DMA_Channel5_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1a]">DMA_Channel6_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1b]">DMA_Channel7_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1c]">DMA_Channel8_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from ir.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from i2c_slave_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from i2c_slave_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[44]">LPTIM_WKUP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3b]">LPUART_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[43]">LPUART_WKUP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[46]">MMU_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[48]">RAMC_PERR_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[45]">SAC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[4c]">SystemInit</a> from system_n32g43x.o(.text) referenced from startup_n32g43x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from counter.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3d]">TIM6_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[49]">TIM9_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[47]">TSC_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[4a]">UCDR_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1e]">USB_HP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[1f]">USB_LP_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from n32g43x_it.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32g43x.o(.text) referenced from startup_n32g43x.o(RESET)
 <LI><a href="#[4d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32g43x.o(.text)
 <LI><a href="#[4e]">fputc</a> from bsp_uart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4b]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[129]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RAMC_PERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g43x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, system_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, system_n32g43x.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_NVIC_Configuration
</UL>

<P><STRONG><a name="[c5]"></a>NVIC_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_I2C
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_NVIC_Configuration
</UL>

<P><STRONG><a name="[12e]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>ADC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphReset
</UL>

<P><STRONG><a name="[dd]"></a>ADC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[131]"></a>ADC_InitStruct</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>ADC_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[132]"></a>ADC_EnableDMA</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>ADC_ConfigInt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>ADC_StartCalibration</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[e2]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[d8]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_get_value_block
</UL>

<P><STRONG><a name="[134]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>ADC_ConfigDiscModeChannelCount</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>ADC_EnableDiscMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_get_value_block
</UL>

<P><STRONG><a name="[137]"></a>ADC_EnableExternalTrigConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>ADC_GetDat</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_get_value_block
</UL>

<P><STRONG><a name="[138]"></a>ADC_EnableAutoInjectedConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>ADC_EnableInjectedDiscMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>ADC_ConfigExternalTrigInjectedConv</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>ADC_EnableExternalTrigInjectedConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>ADC_EnableSoftwareStartInjectedConv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>ADC_ConfigInjectedChannel</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>ADC_ConfigInjectedSequencerLength</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>ADC_SetInjectedOffsetDat</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>ADC_GetInjectedConversionDat</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>ADC_ConfigAnalogWatchdogWorkChannelType</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>ADC_ConfigAnalogWatchdogThresholds</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>ADC_ConfigAnalogWatchdogSingleChannel</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>ADC_EnableTempSensorVrefint</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_get_value_block
</UL>

<P><STRONG><a name="[da]"></a>ADC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_get_value_block
</UL>

<P><STRONG><a name="[146]"></a>ADC_GetIntStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>ADC_InitEx</STRONG> (Thumb, 248 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>ADC_GetFlagStatusNew</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetFlagStatusNew
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[149]"></a>ADC_SetBypassCalibration</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, n32g43x_adc.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>ADC_SetConvResultBitNum</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_SetConvResultBitNum
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
</UL>

<P><STRONG><a name="[54]"></a>ADC_ConfigClk</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32g43x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_ConfigClk &rArr; RCC_ConfigAdcPllClk
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcPllClk
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RCC_Configuration
</UL>

<P><STRONG><a name="[14a]"></a>EXTI_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, n32g43x_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
</UL>

<P><STRONG><a name="[14b]"></a>EXTI_InitStruct</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>EXTI_TriggerSWInt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>EXTI_GetStatusFlag</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>EXTI_ClrStatusFlag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, n32g43x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_ClrStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>EXTI_RTCTimeStampSel</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, n32g43x_exti.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>FLASH_SetLatency</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[ec]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_PrefetchBufSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[151]"></a>FLASH_iCacheRST</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>FLASH_iCacheCmd</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>FLASH_LowVoltageModeCmd</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>FLASH_GetLowVoltageModeSTS</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>FLASH_FLASHSleepModeCmd</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>FLASH_GetFLASHSleepModeSTS</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>FLASH_SetSMPSELStatus</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>FLASH_ClockInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>FLASH_Unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_User
</UL>

<P><STRONG><a name="[a4]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_User
</UL>

<P><STRONG><a name="[57]"></a>FLASH_EraseOnePage</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_User
</UL>

<P><STRONG><a name="[58]"></a>FLASH_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigALLOptionByte
</UL>

<P><STRONG><a name="[59]"></a>FLASH_WaitForLastOpt</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetSTS
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigALLOptionByte
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_MassErase</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_EraseOB</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_GetReadOutProtectionL2STS</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOBData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnWriteProtection
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigALLOptionByte
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_GetReadOutProtectionSTS</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtectionL2_ENABLE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOB
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ConfigUserOB
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_ConfigALLOptionByte</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[60]"></a>FLASH_ProgramWord</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramPage
</UL>

<P><STRONG><a name="[61]"></a>FLASH_ProgramOBData</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[62]"></a>FLASH_EnWriteProtection</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[63]"></a>FLASH_ReadOutProtectionL1</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[64]"></a>FLASH_ReadOutProtectionL2_ENABLE</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[65]"></a>FLASH_ConfigUserOB</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[66]"></a>FLASH_ConfigUserOB2</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionSTS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionL2STS
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>

<P><STRONG><a name="[159]"></a>FLASH_GetUserOB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>FLASH_GetWriteProtectionOB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>FLASH_GetPrefetchBufSTS</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>FLASH_GetSMPSELStatus</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>FLASH_INTConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>FLASH_GetFlagSTS</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, n32g43x_flash.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>FLASH_GetSTS</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, n32g43x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOpt
</UL>

<P><STRONG><a name="[67]"></a>GPIO_DeInit</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, n32g43x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>

<P><STRONG><a name="[69]"></a>GPIO_AFIOInitDefault</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, n32g43x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>

<P><STRONG><a name="[99]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 884 bytes, Stack size 28 bytes, n32g43x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_out
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[98]"></a>GPIO_InitStruct</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, n32g43x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_InitStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_out
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKI2CSDA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKI2CSCL
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>GPIO_SetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>GPIO_SetBitsHigh16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>GPIO_ResetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>GPIO_WriteBit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>GPIO_Write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>GPIO_ConfigPinLock</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>GPIO_ConfigPinRemap</STRONG> (Thumb, 226 bytes, Stack size 28 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>GPIO_ConfigEventOutput</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>GPIO_CtrlEventOutput</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>GPIO_ConfigEXTILine</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
</UL>

<P><STRONG><a name="[16b]"></a>AFIO_ConfigSPINSSMode</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>AFIO_ConfigADCExternalTrigRemap</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, n32g43x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>I2C_DeInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_DeInit &rArr; RCC_EnableAPB1PeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>

<P><STRONG><a name="[6c]"></a>I2C_Init</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>

<P><STRONG><a name="[16d]"></a>I2C_InitStruct</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>I2C_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_0_open
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>I2C_EnableDMA</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>I2C_EnableDmaLastSend</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>I2C_GenerateStart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>I2C_GenerateStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>I2C_ConfigAck</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>I2C_ConfigOwnAddr2</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>I2C_EnableDualAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>I2C_EnableGeneralCall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>I2C_ConfigInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>

<P><STRONG><a name="[105]"></a>I2C_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>I2C_RecvData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>I2C_SendAddr7bit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>I2C_GetRegister</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>I2C_EnableSoftwareReset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>I2C_ConfigNackLocation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>I2C_ConfigSmbusAlert</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>I2C_SendPEC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>I2C_ConfigPecLocation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>I2C_ComputePec</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>I2C_GetPec</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>I2C_EnableArp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>I2C_EnableExtendClk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>I2C_ConfigFastModeDutyCycle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>I2C_CheckEvent</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>I2C_GetLastEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>I2C_GetFlag</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>I2C_ClrFlag</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, n32g43x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_ClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>I2C_GetIntStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>I2C_ClrIntPendingBit</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, n32g43x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_DeInit</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>RCC_ConfigHse</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[6e]"></a>RCC_WaitHseStable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[6f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitMsiStable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[fa]"></a>RCC_ConfigHsi</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
</UL>

<P><STRONG><a name="[70]"></a>RCC_WaitHsiStable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_WaitHsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
</UL>

<P><STRONG><a name="[187]"></a>RCC_SetHsiCalibValue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>RCC_EnableHsi</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_EnableHsi
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
</UL>

<P><STRONG><a name="[ed]"></a>RCC_ConfigMsi</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ConfigMsi
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[71]"></a>RCC_WaitMsiStable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_WaitMsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[188]"></a>RCC_SetMsiCalibValue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_EnableMsi</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>RCC_ConfigPll</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[ef]"></a>RCC_EnablePll</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_EnablePll
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[ee]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigSysclk
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[f1]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[f3]"></a>RCC_ConfigHclk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[f5]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigPclk1
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[f4]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigPclk2
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToMSI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSE
</UL>

<P><STRONG><a name="[18a]"></a>RCC_ConfigInt</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>RCC_ConfigUsbClk</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_ConfigTim18Clk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>RCC_ConfigRngcClk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>RCC_ConfigAdc1mClk</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ConfigAdc1mClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RCC_Configuration
</UL>

<P><STRONG><a name="[55]"></a>RCC_ConfigAdcPllClk</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ConfigAdcPllClk
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[56]"></a>RCC_ConfigAdcHclk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigAdcHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[18e]"></a>RCC_ConfigTrng1mClk</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_EnableTrng1mClk</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_ConfigUCDRClk</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_ConfigUSBXTALESSMode</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_EnableRETPeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>RCC_EnableRETPeriphReset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>RCC_ConfigLPTIMClk</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>

<P><STRONG><a name="[73]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigLse
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigLPTIMClk
</UL>

<P><STRONG><a name="[194]"></a>RCC_GetLPTIMClkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_ConfigLPUARTClk</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>RCC_GetLPUARTClkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>RCC_ConfigSRAMParityErrorInt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>RCC_ConfigSRAMParityErrorRESET</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_ClrSRAMParityErrorFlag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>RCC_ConfigLse</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
</UL>

<P><STRONG><a name="[19a]"></a>RCC_EnableLsi</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>RCC_ConfigRtcClk</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>RCC_GetRTCClkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>RCC_EnableRtcClk</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>RCC_ConfigLSXClk</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>RCC_GetLSXClkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpClock
</UL>

<P><STRONG><a name="[d4]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RCC_Configuration
</UL>

<P><STRONG><a name="[97]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputExtiInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RCC_Configuration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[53]"></a>RCC_EnableAHBPeriphReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[68]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIOInitDefault
</UL>

<P><STRONG><a name="[6b]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_EnableLowPowerReset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>RCC_EnableClockSecuritySystem</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_EnableClockSecuritySystem
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_EnableLSEClockSecuritySystem</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>RCC_GetLSEClockSecuritySystemStatus</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>RCC_ConfigMcoClkPre</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigMcoClkPre
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
</UL>

<P><STRONG><a name="[ea]"></a>RCC_ConfigMco</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, n32g43x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigMco
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_ClrFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>RCC_GetIntStatus</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>RCC_ClrIntPendingBit</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, n32g43x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>TIM_DeInit</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>

<P><STRONG><a name="[10a]"></a>TIM_InitTimeBase</STRONG> (Thumb, 718 bytes, Stack size 12 bytes, n32g43x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_InitOc1</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>TIM_InitOc2</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>TIM_InitOc3</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_InitOc4</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_InitOc5</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_InitOc6</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>TIM_ICInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap4Prescaler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap3Prescaler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap2Prescaler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap1Prescaler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI4
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI3
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
</UL>

<P><STRONG><a name="[78]"></a>TIM_SetInCap1Prescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
</UL>

<P><STRONG><a name="[7a]"></a>TIM_SetInCap2Prescaler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
</UL>

<P><STRONG><a name="[7c]"></a>TIM_SetInCap3Prescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7e]"></a>TIM_SetInCap4Prescaler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7f]"></a>TIM_ConfigPwmIc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap2Prescaler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetInCap1Prescaler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_ConfigBkdt</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_InitTimBaseStruct</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_InitOcStruct</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>TIM_InitIcStruct</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_InitBkdtStruct</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>TIM_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_EnableCtrlPwmOutputs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>TIM_ConfigInt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
</UL>

<P><STRONG><a name="[1b2]"></a>TIM_GenerateEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>TIM_ConfigDma</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>TIM_EnableDma</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_ConfigInternalClk</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>TIM_ConfigInternalTrigToExt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrig
</UL>

<P><STRONG><a name="[81]"></a>TIM_SelectInputTrig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInternalTrigToExt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
</UL>

<P><STRONG><a name="[82]"></a>TIM_ConfigExtTrigAsClk</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTI1
</UL>

<P><STRONG><a name="[83]"></a>TIM_ConfigExtClkMode1</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrig
</UL>

<P><STRONG><a name="[84]"></a>TIM_ConfigExtTrig</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtClkMode2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtClkMode1
</UL>

<P><STRONG><a name="[85]"></a>TIM_ConfigExtClkMode2</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrig
</UL>

<P><STRONG><a name="[1b6]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_ConfigCntMode</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>TIM_ConfigEncoderInterface</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>TIM_ConfigForcedOc1</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>TIM_ConfigForcedOc2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>TIM_ConfigForcedOc3</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>TIM_ConfigForcedOc4</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>TIM_ConfigForcedOc5</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>TIM_ConfigForcedOc6</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_ConfigArPreload</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>TIM_SelectComEvt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_SelectCapCmpDmaSrc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_EnableCapCmpPreloadControl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_ConfigOc1Preload</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_ConfigOc2Preload</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_ConfigOc3Preload</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_ConfigOc4Preload</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>TIM_ConfigOc5Preload</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_ConfigOc6Preload</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>TIM_ConfigOc1Fast</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_ConfigOc2Fast</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_ConfigOc3Fast</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_ConfigOc4Fast</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_ConfigOc5Fast</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_ConfigOc6Fast</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_ClrOc1Ref</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_ClrOc2Ref</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_ClrOc3Ref</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>TIM_ClrOc4Ref</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_ClrOc5Ref</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_ClrOc6Ref</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_ConfigOc1Polarity</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>TIM_ConfigOc1NPolarity</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>TIM_ConfigOc2Polarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_ConfigOc2NPolarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_ConfigOc3Polarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>TIM_ConfigOc3NPolarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_ConfigOc4Polarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>TIM_ConfigOc5Polarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>TIM_ConfigOc6Polarity</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>TIM_EnableCapCmpCh</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>TIM_EnableCapCmpChN</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>TIM_SelectOcMode</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>TIM_EnableUpdateEvt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>TIM_ConfigUpdateRequestIntSrc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>TIM_SelectOutputTrig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>TIM_SetCnt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>TIM_SetAutoReload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_SetCmp1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_SetCmp2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>TIM_SetCmp3</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>TIM_SetCmp4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>TIM_SetCmp5</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>TIM_SetCmp6</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>TIM_SetClkDiv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>TIM_GetCap1</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>TIM_GetCap2</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>TIM_GetCap3</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>TIM_GetCap4</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>TIM_GetCap5</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>TIM_GetCap6</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>TIM_GetCnt</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>TIM_GetPrescaler</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>TIM_GetAutoReload</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>TIM_GetCCENStatus</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>TIM_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>TIM_GetIntStatus</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, n32g43x_tim.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>USART_DeInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, n32g43x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>

<P><STRONG><a name="[87]"></a>USART_Init</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[1ff]"></a>USART_StructInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>USART_ClockInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>USART_ClockStructInit</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>USART_Enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[c8]"></a>USART_ConfigInt</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[202]"></a>USART_EnableDMA</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>USART_SetAddr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>USART_ConfigWakeUpMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>USART_EnableRcvWakeUp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>USART_ConfigLINBreakDetectLength</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>USART_EnableLIN</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>USART_SendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SendText
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SendNum
</UL>

<P><STRONG><a name="[cd]"></a>USART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Sum_rec
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[208]"></a>USART_SendBreak</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>USART_SetGuardTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>USART_SetPrescaler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>USART_EnableSmartCard</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>USART_SetSmartCardNACK</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>USART_EnableHalfDuplex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>USART_ConfigIrDAMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>USART_EnableIrDA</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>USART_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Sum_rec
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SendText
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SendNum
</UL>

<P><STRONG><a name="[210]"></a>USART_ClrFlag</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, n32g43x_usart.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>USART_GetIntStatus</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, n32g43x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_ClrIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>mcubus_cmd_cb</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[93]"></a>v2t</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[8a]"></a>ad2temp</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v2t
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMD_TEMP
</UL>

<P><STRONG><a name="[94]"></a>DMD_TEMP</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[95]"></a>Flash_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMD_TEMP
</UL>

<P><STRONG><a name="[9f]"></a>Delay</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData
</UL>

<P><STRONG><a name="[96]"></a>KeyInputInit</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>

<P><STRONG><a name="[9a]"></a>LedInit_in</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKI2CSCL
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[9b]"></a>LedInit</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LedInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[9d]"></a>LedOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[9e]"></a>LedOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[211]"></a>LEDBlink</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>HC595SendData</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HC595SendData &rArr; LedInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>HC595SendData_1</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSP_CONTREL
</UL>

<P><STRONG><a name="[a1]"></a>TSP_CONTREL</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData_1
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_Program_User</STRONG> (Thumb, 840 bytes, Stack size 2104 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramPage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = main &rArr; CLKCTRL_init &rArr; DumpClock &rArr; log_init &rArr; bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_ms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_slave_api_open
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_slave_api_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g43x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>DMA_IRQ_HANDLER</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, n32g43x_it.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__delay_cycles</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[a9]"></a>__delay_ms</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Delay4us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
</UL>

<P><STRONG><a name="[b2]"></a>CHECKI2CSDA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[b4]"></a>CHECKI2CSCL</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[a8]"></a>i2c_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_init &rArr; LedInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pull_off_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>IIC_Start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
</UL>

<P><STRONG><a name="[b8]"></a>IIC_Stop</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[b9]"></a>IIC_Wait_Ack</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKI2CSDA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
</UL>

<P><STRONG><a name="[ba]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[bb]"></a>IIC_NAck</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[bc]"></a>IIC_Send_Byte</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
</UL>

<P><STRONG><a name="[bd]"></a>IIC_Read_Byte</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKI2CSDA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CI2cRead_Block_TEST
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_vol_IIC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_block
</UL>

<P><STRONG><a name="[be]"></a>i2c_write_block</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR
</UL>

<P><STRONG><a name="[bf]"></a>i2c_read_block</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit_in
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay4us
</UL>

<P><STRONG><a name="[c1]"></a>CI2cRead_Block_TEST</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOn
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay4us
</UL>

<P><STRONG><a name="[c2]"></a>read_vol_IIC</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay4us
</UL>

<P><STRONG><a name="[213]"></a>io_set_high</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>io_set_low</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>io_set_dir_out</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>io_set_dir_in</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>io_set_pull_off_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_set_pull_off_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[217]"></a>io_set_pull_up_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>io_get_level</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, n32g43x_start_pins.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>UART_NVIC_Configuration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>

<P><STRONG><a name="[c6]"></a>bsp_uart_api_init</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_uart_api_init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[c9]"></a>bsp_uart_api_init_1</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; USART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[cc]"></a>Usart_Sum_rec</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[ce]"></a>HMI_SendText</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, bsp_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[d0]"></a>HMI_Pow</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_SendNum
</UL>

<P><STRONG><a name="[cf]"></a>HMI_SendNum</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, bsp_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_Pow
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>ADC_RCC_Configuration</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_RCC_Configuration &rArr; ADC_ConfigClk &rArr; RCC_ConfigAdcPllClk
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdc1mClk
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[d6]"></a>ADC_GPIO_Configuration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc_basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_GPIO_Configuration &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[8b]"></a>ADC_GetData</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, adc_basic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[dc]"></a>ADC_Initial</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, adc_basic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Initial &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetConvResultBitNum
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatusNew
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_adc_init
</UL>

<P><STRONG><a name="[a7]"></a>bsp_adc_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_adc_init &rArr; ADC_RCC_Configuration &rArr; ADC_ConfigClk &rArr; RCC_ConfigAdcPllClk
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RCC_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initial
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>bsp_adc_get_value_block</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bsp_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>

<P><STRONG><a name="[e4]"></a>DumpClock</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clkctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DumpClock &rArr; log_init &rArr; bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
</UL>

<P><STRONG><a name="[a6]"></a>CLKCTRL_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, clkctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CLKCTRL_init &rArr; DumpClock &rArr; log_init &rArr; bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableClockSecuritySystem
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMcoClkPre
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMco
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToHSI
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SetSysClockToHSI</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, clkctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetSysClockToHSI &rArr; RCC_WaitHsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableHsi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitMsiStable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMsi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
</UL>

<P><STRONG><a name="[f6]"></a>SetSysClockToMSI</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, clkctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitMsiStable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMsi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
</UL>

<P><STRONG><a name="[f7]"></a>SetSysClockToHSE</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, clkctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitMsiStable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMsi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
</UL>

<P><STRONG><a name="[f9]"></a>SetSysClockToPLL</STRONG> (Thumb, 774 bytes, Stack size 56 bytes, clkctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHseStable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHsi
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHse
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitMsiStable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigMsi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[e5]"></a>log_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = log_init &rArr; bsp_uart_api_init_1 &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init_1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_api_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpClock
</UL>

<P><STRONG><a name="[219]"></a>softtimer_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_softtimer.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>softtimer_register</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, app_softtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_get_uptime
</UL>

<P><STRONG><a name="[21a]"></a>softtimer_remove_by_function</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, app_softtimer.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>softtimer_poll</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_softtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tim_delta
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;counter_get_uptime
</UL>

<P><STRONG><a name="[ff]"></a>IR</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, app_softtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GPIO_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_block
</UL>

<P><STRONG><a name="[100]"></a>motor_pi_test</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, app_softtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[ae]"></a>task</STRONG> (Thumb, 420 bytes, Stack size 8 bytes, app_softtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = task &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>NVIC_Configuration_I2C</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration_I2C &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>

<P><STRONG><a name="[102]"></a>I2C_ResetBusy</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ResetBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>

<P><STRONG><a name="[aa]"></a>I2C2_GPIO_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C2_GPIO_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR
</UL>

<P><STRONG><a name="[af]"></a>I2C2_init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C2_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConfigInt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_I2C
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_slave_api_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
</UL>

<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C2_EV_IRQHandler &rArr; I2C2_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_dispatch_poll_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>msg_dispatch_poll_1</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>LedInit_out</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, i2c_slave_n32g43x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>

<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c_slave_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C2_ER_IRQHandler &rArr; I2C2_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClrFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>counter_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, counter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = counter_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, counter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>counter_get_uptime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, counter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softtimer_register
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softtimer_poll
</UL>

<P><STRONG><a name="[fe]"></a>get_tim_delta</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, counter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softtimer_poll
</UL>

<P><STRONG><a name="[10d]"></a>InputExtiInit</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, ir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigEXTILine
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[110]"></a>HW</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI2_IRQHandler &rArr; HW &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrStatusFlag
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g43x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcubus_cmd_cb
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[21e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[21f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[221]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[114]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[223]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[224]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[225]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[226]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e6]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKCTRL_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_pi_test
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToPLL
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpClock
</UL>

<P><STRONG><a name="[91]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad2temp
</UL>

<P><STRONG><a name="[227]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[121]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[11e]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[120]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[228]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[229]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>SetSysClock</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, system_n32g43x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[77]"></a>ConfigTI1</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
</UL>

<P><STRONG><a name="[79]"></a>ConfigTI2</STRONG> (Thumb, 274 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPwmIc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigExtTrigAsClk
</UL>

<P><STRONG><a name="[7b]"></a>ConfigTI3</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7d]"></a>ConfigTI4</STRONG> (Thumb, 274 bytes, Stack size 20 bytes, n32g43x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a5]"></a>FLASH_ProgramPage</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_User
</UL>

<P><STRONG><a name="[b0]"></a>I2C_0_open</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_0_open &rArr; I2C_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_i2c_slave_api_open
</UL>

<P><STRONG><a name="[ab]"></a>bsp_i2c_slave_api_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsp_i2c_slave_api_init &rArr; I2C2_init &rArr; I2C_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>bsp_i2c_slave_api_open</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_i2c_slave_api_open &rArr; I2C_0_open &rArr; I2C_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_0_open
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[125]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
